##########################################################
# TypoScript Config for Tree Prevnext					 #
##########################################################

plugin.tx_cagpagebrowser {

	# values need to be cleared here since some TS is coming from ext_localconf and may not be overidden
	5 >
	10 >
	20 >
	25 >
	30 >
	40 >
	50 >
	_CSS_DEFAULT_STYLE >

	5 = USER
	5 {
		userFunc = tx_cagpagebrowser->treePrevNext
		excludeUids = {$plugin.tx_cagpagebrowser.excludeUidList}
		excludeDoktypes = {$plugin.tx_cagpagebrowser.dtypes}
		treeLoop = {$plugin.tx_cagpagebrowser.treePrevNext.treeLoop}
		pageNumbers = {$plugin.tx_cagpagebrowser.treePrevNext.pageNumbers}
	}

	10 = TEXT
	10.wrap = {$plugin.tx_cagpagebrowser.wrapFirst}
	10 {
		# get FIRST page title
		cObject = TEXT
		cObject.wrap = {|}
		cObject.insertData = 1
		cObject.cObject = TEXT
		cObject.cObject.dataWrap = DB : pages:{field:first}:title

		# build link to the PREVIOUS page
		typolink.ATagParams = title="{$plugin.tx_cagpagebrowser.first}"
		# if not in treeLoop mode links to first/previous page will NOT be generated on first page of tree branch
		typolink.parameter.cObject = TEXT
		typolink.parameter.cObject {
			field = first
			if {
				value.field = first
				equals.data = TSFE:id
				isFalse = {$plugin.tx_cagpagebrowser.treePrevNext.treeLoop}				
				negate = 1
			}
		}

		# pagetitle overridden with browseword if is true

		override.cObject = TEXT
		override.cObject.value = {$plugin.tx_cagpagebrowser.first}
		override.cObject.wrap = <span class="previous first"> | </span>
		override.if {
			value = 1
			equals = {$plugin.tx_cagpagebrowser.browsewords}
		}
	}
	
	20 = TEXT
	20.wrap = {$plugin.tx_cagpagebrowser.wrapPrevious}
	20 {
		# get PREVIOUS page title
		cObject = TEXT
		cObject.wrap = {|}
		cObject.insertData = 1
		cObject.cObject = TEXT
		cObject.cObject.dataWrap = DB : pages:{field:prev}:title

		# build link to the PREVIOUS page
		typolink.parameter.cObject = TEXT
		typolink.parameter.cObject {
			field = prev
			if {
				value.field = prev
				equals.data = TSFE:id
				negate = 1
			}
		}
		typolink.ATagParams = title="{$plugin.tx_cagpagebrowser.previous}"

		# pagetitle overridden with browseword if is true
		override.cObject = TEXT
		override.cObject.value = {$plugin.tx_cagpagebrowser.previous}
		override.cObject.wrap = <span class="previous"> | </span>
		override.if {
			value = 1
			equals = {$plugin.tx_cagpagebrowser.browsewords}
		}
	}
	
	25 = HMENU
	25 {

		stdWrap.if.isTrue = {$plugin.tx_cagpagebrowser.treePrevNext.pageNumbers}

		special = list
		special.value.field = treeuids

		excludeUidList = {$plugin.tx_cagpagebrowser.excludeUidList}
		excludeDoktypes = {$plugin.tx_cagpagebrowser.dtypes}

		1 = TMENU
		1 {

			itemArrayProcFunc = tx_cagpagebrowser->pageNumbers
			stepSize = {$plugin.tx_cagpagebrowser.pagenumbers.stepSize}
			useNumbering = {$plugin.tx_cagpagebrowser.pagenumbers.useNumbering}
			noBlur = 1

			wrap = {$plugin.tx_cagpagebrowser.pagenumbers.wrapPageNumbers}

			NO.allWrap = {$plugin.tx_cagpagebrowser.pagenumbers.wrapSingleNumber}

			CUR < .NO
			CUR = 1
			CUR.doNotLinkIt = 1

		}

	}	
	
	30 = TEXT
	30.wrap = {$plugin.tx_cagpagebrowser.wrapIndex}
	30 {
		# get PREVIOUS page title
		cObject = TEXT
		cObject.wrap = {|}
		cObject.insertData = 1
		cObject.cObject = TEXT
		cObject.cObject.dataWrap = DB : pages:{field:index}:title

		# build link to the PREVIOUS page
		typolink.parameter.field = index
		typolink.ATagParams = title="{$plugin.tx_cagpagebrowser.indexword}"

		# pagetitle overridden with browseword if is true
		override.cObject = TEXT
		override.cObject.value = {$plugin.tx_cagpagebrowser.indexword}
		override.cObject.wrap = <span class="index"> | </span>
		override.if {
			value = 1
			equals = {$plugin.tx_cagpagebrowser.browsewords}
		}
	}		

	40 = TEXT
	40.wrap = {$plugin.tx_cagpagebrowser.wrapNext}
	40 {
		# get PREVIOUS page title
		cObject = TEXT
		cObject.wrap = {|}
		cObject.insertData = 1
		cObject.cObject = TEXT
		cObject.cObject.dataWrap = DB : pages:{field:next}:title

		# build link to the NEXT page
		typolink.parameter.cObject = TEXT
		typolink.parameter.cObject {
			field = next
			if {
				value.field = next
				equals.data = TSFE:id
				negate = 1
			}
		}
		typolink.ATagParams = title="{$plugin.tx_cagpagebrowser.next}"

		# pagetitle overridden with browseword if is true
		override.cObject = TEXT
		override.cObject.value = {$plugin.tx_cagpagebrowser.next}
		override.cObject.wrap = <span class="next"> | </span>
		override.if {
			value = 1
			equals = {$plugin.tx_cagpagebrowser.browsewords}
		}
	}

	50 = TEXT
	50.wrap = {$plugin.tx_cagpagebrowser.wrapLast}
	50 {
		# get LAST page title
		cObject = TEXT
		cObject.wrap = {|}
		cObject.insertData = 1
		cObject.cObject = TEXT
		cObject.cObject.dataWrap = DB : pages:{field:last}:title

		# build link to the PREVIOUS page
		typolink.ATagParams = title="{$plugin.tx_cagpagebrowser.last}"
		# if not in treeLoop mode links to last/next page will NOT be generated on last page of tree branch		
		typolink.parameter.cObject = TEXT
		typolink.parameter.cObject {
			field = last
			if {
				value.field = last 
				equals.data = TSFE:id
				isFalse = {$plugin.tx_cagpagebrowser.treePrevNext.treeLoop}
				negate = 1
			}
		}		

		# pagetitle overridden with browseword if is true
		override.cObject = TEXT
		override.cObject.value = {$plugin.tx_cagpagebrowser.last}
		override.cObject.wrap = <span class="next last"> | </span>
		override.if {
			value = 1
			equals = {$plugin.tx_cagpagebrowser.browsewords}
		}
	}

	userFunc >
	entryLink >

	stdWrap {
		if.value = 1
		if.equals.cObject = USER
		if.equals.cObject {
			userFunc = tx_cagpagebrowser->main
			browserMode = {$plugin.tx_cagpagebrowser.browserMode}
			excludeUidList = {$plugin.tx_cagpagebrowser.excludeUidList}
		}
	}

	_CSS_DEFAULT_STYLE (
		div.cag_pagebrowser {margin: 2em 0 1em 0;}
		div.cag_pagebrowser ul {list-style-type: none; margin: 0; padding: 0;}
		div.cag_pagebrowser ul ul {display: inline;}		
		div.cag_pagebrowser ul li {display: inline; text-align: center; padding: 0 0.5em;}		
		div.cag_pagebrowser a {font-size: 0.8em;}
		div.cag_pagebrowser .divider {padding: 0 0.5em;}
		div.cag_pagebrowser li.first {padding-left: 0;}
		div.cag_pagebrowser li.last {padding-right: 0;}		
	)

}
